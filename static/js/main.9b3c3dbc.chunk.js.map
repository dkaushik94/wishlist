{"version":3,"sources":["wish.js","wishlist.js","App.js","serviceWorker.js","index.js"],"names":["Wish","console","log","this","props","react_default","a","createElement","style","styles","wish","myWish","React","Component","backgroundColor","width","fontSize","margin","padding","borderRadius","fontFamily","Wishlist","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","wishes","map","src_wish","display","flexDirection","alignItems","justifyContent","App","className","src","alt","wishlist","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAGMA,sMAMEC,QAAQC,IAAIC,KAAKC,wCAIjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,EAAOC,MACfL,EAAAC,EAAAC,cAAA,YAAOJ,KAAKC,MAAMO,gBAZfC,IAAMC,YAkBnBJ,EAAS,CACXC,KAAQ,CACJI,gBAAmB,UACnBC,MAAS,MACTC,SAAY,SACZC,OAAU,GACVC,QAAW,GACXC,aAAgB,EAEhBC,WAAc,YAGPpB,IC9BTqB,cACF,SAAAA,EAAYjB,GAAM,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApB,KAAAkB,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAxB,KAAMC,KACDwB,MAAQ,CACTC,OAAU,CACN,2BACA,iCACA,WACA,iCACA,iBACA,wBACA,oBACA,aAXMP,wEAgBd,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,MAASC,EAAOoB,QACjBxB,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAACY,WAAc,aAAcJ,SAAY,SAApD,yBAEIb,KAAKyB,MAAMC,OAAOC,IAAI,SAACpB,GACnB,OACIL,EAAAC,EAAAC,cAACwB,EAAD,CAAMpB,OAAUD,eAxBzBE,IAAMC,WAkCvBJ,EAAS,CACXoB,OAAU,CACNf,gBAAmB,UACnBkB,QAAW,OACXC,cAAiB,SACjBC,WAAc,SACdC,eAAkB,iBAIXd,IC7BAe,MAdf,WACE,OACE/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,MAAM7B,MAAO,CAACM,gBAAmB,YAC9CT,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACU,QAAW,KACtBb,EAAAC,EAAAC,cAAA,UAAQC,MAAO,CAACM,gBAAmB,UAAWkB,QAAW,OAAQC,cAAiB,SAAUC,WAAa,SAAUC,eAAkB,iBACnI9B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACW,aAAgB,IAAKmB,IAAI,mCAAmCC,IAAI,SAC7ElC,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAACQ,SAAW,WAAzB,sCAEFX,EAAAC,EAAAC,cAACiC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b3c3dbc.chunk.js","sourcesContent":["import React from 'react';\nimport './fonts.css'\n\nclass Wish extends React.Component{\n    // constructor(props){\n    //     super(props);\n    // }\n\n    componentWillMount(){\n        console.log(this.props)\n    }\n\n    render(){\n        return(\n            <div style={styles.wish}>\n                <text>{this.props.myWish}</text>\n            </div>\n        )\n    }\n}\n\nconst styles = {\n    \"wish\": {\n        \"backgroundColor\": \"#ffffff\",\n        \"width\": \"50%\",\n        \"fontSize\": \"1.2rem\", \n        \"margin\": 20,\n        \"padding\": 20,\n        \"borderRadius\": 5,\n        // \"boxShadow\": \"3px 3px 3px #d3d3d3\" ,\n        \"fontFamily\": \"Raleway\"\n    }\n} \nexport default Wish;","import React from 'react';\nimport Wish from './wish.js';\n\nclass Wishlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            \"wishes\": [\n                \"Automatic Coffee Machine\",\n                \"27 inch Screens for Developers\",\n                \"Macbooks\", \n                \"GPU Access for Data Scientists\",\n                \"Standing Desks\",\n                \"New Floor for working\",\n                \"iPad to test apps\", \n                \"iMac pro\"\n            ]\n        }\n    }\n    render(){\n        return(\n            <div>\n                <div style = {styles.wishes}>\n                    <h1 style={{\"fontFamily\": \"Montserrat\", \"fontSize\": \"3rem\"}}> Anthem AI requests: </h1>\n                    {\n                        this.state.wishes.map((wish)=>{\n                            return(\n                                <Wish myWish = {wish}/>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nconst styles = {\n    \"wishes\": {\n        \"backgroundColor\": \"#eeeeee\",\n        \"display\": \"flex\",\n        \"flexDirection\": \"column\",\n        \"alignItems\": \"center\",\n        \"justifyContent\": \"space-around\"\n    }\n}\n\nexport default Wishlist","import React from 'react';\nimport './App.css';\nimport Wishlist from'./wishlist';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{\"backgroundColor\": \"#eeeeee\"}}>\n      <div style={{\"padding\": 20}}>\n        <header style={{\"backgroundColor\": \"#eeeeee\", \"display\": \"flex\", \"flexDirection\": \"column\", \"alignItems\":\"center\", \"justifyContent\": \"space-around\"}}>\n          <img style={{\"borderRadius\": 20}} src=\"https://i.imgflip.com/33es2g.jpg\" alt=\"logo\" />\n          <text style={{\"fontSize\":\"0.8rem\"}}>Credits: https://wwww.imgflip.com</text>\n        </header>\n        <Wishlist />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}